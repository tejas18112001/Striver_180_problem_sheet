/*
Problem Statement: Given two numbers N and M, find the Nth root of M. The nth root of a number M is defined as a number X when raised to the power N equals M. If the â€˜nth root is not an integer, return -1.

Examples
Example 1:
Input Format: N = 3, M = 27
Result: 3
Explanation: The cube root of 27 is equal to 3.

Example 2:
Input Format: N = 4, M = 69
Result: -1
Explanation: The 4th root of 69 does not exist. So, the answer is -1.

*/

public class Solution {
    public static int NthRoot(int n, int m) {
        int low = 1  , high = m/2 ;
      
        while(high > low) {
              int mid = (high - low)/2 + low ;

              if(Math.pow(mid , n) == m) 
              return mid ;

              if(Math.pow(mid , n) > m) {
                  high = mid ;
              }
              else {
                  low = mid+1 ;
              }
        }

        return -1 ;
    }
}
